package com.example.daos;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.daos.OrderItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_ITEM".
*/
public class OrderItemDao extends AbstractDao<OrderItem, Void> {

    public static final String TABLENAME = "ORDER_ITEM";

    /**
     * Properties of entity OrderItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Num = new Property(0, Integer.class, "Num", false, "NUM");
        public final static Property Price = new Property(1, Float.class, "Price", false, "PRICE");
        public final static Property Orderid = new Property(2, long.class, "orderid", false, "ORDERID");
    };

    private Query<OrderItem> order_OrderItemListQuery;

    public OrderItemDao(DaoConfig config) {
        super(config);
    }
    
    public OrderItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_ITEM\" (" + //
                "\"NUM\" INTEGER," + // 0: Num
                "\"PRICE\" REAL," + // 1: Price
                "\"ORDERID\" INTEGER NOT NULL );"); // 2: orderid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderItem entity) {
        stmt.clearBindings();
 
        Integer Num = entity.getNum();
        if (Num != null) {
            stmt.bindLong(1, Num);
        }
 
        Float Price = entity.getPrice();
        if (Price != null) {
            stmt.bindDouble(2, Price);
        }
        stmt.bindLong(3, entity.getOrderid());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public OrderItem readEntity(Cursor cursor, int offset) {
        OrderItem entity = new OrderItem( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // Num
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // Price
            cursor.getLong(offset + 2) // orderid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderItem entity, int offset) {
        entity.setNum(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setPrice(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setOrderid(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(OrderItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(OrderItem entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orderItemList" to-many relationship of Order. */
    public List<OrderItem> _queryOrder_OrderItemList(long orderid) {
        synchronized (this) {
            if (order_OrderItemListQuery == null) {
                QueryBuilder<OrderItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Orderid.eq(null));
                order_OrderItemListQuery = queryBuilder.build();
            }
        }
        Query<OrderItem> query = order_OrderItemListQuery.forCurrentThread();
        query.setParameter(0, orderid);
        return query.list();
    }

}
